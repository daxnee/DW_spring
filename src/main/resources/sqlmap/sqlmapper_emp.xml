<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.first_spring.mapper.EmpMapper">
	<select id="getEmpList" resultType="EmpVO"> <!--  resultType="EmpVO : 리턴타입이 EmpVO -->
	<!-- 쿼리의 결과값을 EmpVO로 하겠다. -->
	<!-- 결과값을 위 경로에 설정한 Mapper의 메소드(id="getEmpList")로 return -->
<!-- MyBatis에게 Mapper 경로를 적어야 한다. -->
<!-- 대소문자 구분 안함. 대신 오타 주의 -->
<!-- 0513 -->
	SELECT 
	  empno, 
	  ename, 
	  job 
	FROM 
	  emp
	 ordey by 1 
	</select>
	
	<!-- 0513 모든 emp사원 구하기  -->
	<select id="selectAllEmp" resultType="EmpVO">
	SELECT 
		 *
	FROM 
	  emp as e join dept as d
	  on e.DEPTNO = d.DEPTNO
	  ORDER BY empno ASC
	</select>
	
	<!--job이 SALESMAN이면서 sal이 파라미터값인 사원 조회 -->
	<select id="SelectEmpSal" resultType="EmpVO">
	select 
	  * 
	from 
	  emp 
	where 
	  job = "SALESMAN" 
	  and sal >= #{sal}

	</select>
	
	<!-- #{}월 입사자 중 sal이 가장 높은 사원 조회 -->
	<select id="selectEmpMaxSal" resultType="EmpVO">
	    select 
      ENAME, 
      sal 
    from 
      (
        select 
          max(sal) as maxSal 
        from 
          emp 
        where 
          date_format(HIREDATE, '%m') = #{HIREDATE}
          ) as e, 
      emp 
    where 
      sal = e.maxSal 
      and date_format(HIREDATE, '%m') = #{HIREDATE}
	</select>
	
	 <!-- #{}월 입사자 중 sal이 가장 높은 사원 조회2 -->
	<select id="selectEmpMax" resultType="EmpVO">
	select 
      ENAME, 
      sal,
      date_format(hiredate, '%m')
    from 
      emp 
    where 
      date_format(hiredate, '%m') = #{hiredate}
	</select>
		
	
	<!--#{empno}인 사원 조회 -->
	<select id="getEmpEmpno" resultType="EmpVO">
	select 
      * 
    FROM 
      emp 
    WHERE 
      empno = #{empNo}
	</select>
	
	<!--job이 manager이고 sal이 2500이상받는 사원comm을 500으로 업데이트 후 사원이름,직업,커미션 조회  -->
	<select id="selectEmpWhereJobAndSal" resultType="EmpVO">
	select 
      empno, 
      ename, 
      job, 
      comm 
    from 
      emp 
    WHERE 
      job = #{job} 
      AND sal >= #{sal}

	</select>
	
	<!-- 부서 번호가 10,30 이고 급여가 (파라미터값) 이상인 사람을 조회 -->
	<select id="selectEmpHowSal" resultType="EmpVO">
	select
		ENAME,
		SAL 
	FROM 
		emp
	WHERE 
		DEPTNO in (10,30)
		AND SAL > #{sal}
	</select>
	
	<!-- 여기부터 -->
	
	<!-- 입사년도가 1981 -->
	<select id="selectEmpHiredate" resultType="EmpVO">
	SELECT
		*
	FROM 
		emp
	WHERE 
		DATE_FORMAT(HIREDATE,'%Y') = #{hiredate};
	</select>

	 <!-- 220509 -->
	 <!-- insert -->
	 <!-- Oracle은 Mybatis Insert 할 때 PK문법이 다름(시퀀스를 추가해야함) -->
	<insert id="insertEmp">
	<!-- 0510 문제1(2) -->	
	INSERT INTO emp
	(
		empno,
		ename,
		job,
		deptno,
		hiredate
	) 
	VALUES
	(
		#{empno},
		#{ename},
		#{job},
		#{deptno},
		now()
	)
	</insert>
	
	<delete id="deleteEmp">
	DELETE FROM 
		emp
	WHERE 
		empno = #{empno}
	</delete>
	
	<update id="updateEmp">
	update 
		emp
	set 
		job = #{job}
		sal = #{sal}
	where 
		empno = #{empno}
	</update>
	
	<!-- 0510  -->
	<!-- 0510 문제1(1) -->
	<select id="selectDeptNo" resultType="EmpVO">
	select 
		d.deptno
	FROM 
		emp as e 
		right join dept as d ON e.DEPTNO = d.DEPTNO 
	WHERE 
		e.deptno is null 
	</select>
	
	<!-- 문제2 -->
	<delete id=""> 
	  DELETE FROM
		emp 
	WHERE 
		sal >= #{sal}
	</delete>
	
	<delete id="getEmpRemoveCount">
	Delete from
	emp
	where
	empno = #{empno}
	</delete>
	
	
	<!-- 0511  -->
	<!-- if문 -->
	<!-- true 가 파라미터로 들어오면 사수 있는 사원 조회
		false가 파라미터로 들어오면 사수 없는 사원 조회 -->
	<select id="selectEmpMgr" resultType="EmpVO">
	SELECT
		empno,
		ename,
		mgr
	FROM
		emp
	WHERE 1=1
		 <!--1=1 : and조건을 위한 의미 없는 구문 -->
	<!-- test == if문의 중괄호 -->
	<!-- MyBatis에는 boolean형이 없어서 문자로 비교해야 한다. -->
		<if test='isMgr.equals("true")'>
			AND mgr IS NOT NULL
		</if>
		<if test='isMgr.equals("false")'>
			AND mgr IS NULL
		</if>
	</select>
	<!-- postman => http://localhost:8080/emp/mgr/false -->
	
	
	<!-- 0511 문제1 -->
	<select id="updateJobAndSal" resultType="EmpVO">
	SELECT 
		empno,
		comm,
		sal
	FROM
		emp
	WHERE 
		empno = #{empno}
	</select>
	
	<!-- 0511 문제2 사원번호가 7844인 사원의 COMM이 0이거나 NULL이면 기존 급여에서 500을 추가. 
	COMM이 있다면 0 리턴 -->
	<select id="selectEmpCommSal" resultType="EmpVO">
	select 
		empno,
		sal,
		comm
	from 
		emp
	where 
		EMPNO = #{empno}
	</select>
	
	<!-- 	//0513  -->
	<update id="updateJobSal"> 
	UPDATE 
		emp 
	SET
		job = #{job},
		sal = #{sal}
	WHERE 
		empno = #{empno}
	</update>
	
	<!-- 0512 hashMap -->
	<select id="selectEmpMapList" resultType="map">
	SELECT
		 empno,
		 ename,
		 job,
		 sal,
	 	e.deptno
	 FROM emp as e INNER JOIN dept as d
	 ON e.deptno = d.deptno
	</select> 
	
</mapper>
